<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="MemberMapper">

	<resultMap id="member" type="project.spring.hohotest.model.Member">
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="user_id" column="user_id" />
		<result property="user_pw" column="user_pw" />
		<result property="email" column="email" />
		<result property="gender" column="gender" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="postcode" column="postcode" />
		<result property="addr1" column="addr1" />
		<result property="addr2" column="addr2" />
		<result property="is_admin" column="is_admin" />
	</resultMap>

	<!-- 아이디 중복검사를 수행한다 -->
    <select id="selectUserIdCount" parameterType="project.spring.hohotest.model.Member" resultType="int">
        SELECT count(id) FROM member WHERE user_id=#{user_id}
    </select>
     
    <!-- 이메일 중복검사를 수행한다 -->
    <select id="selectEmailCount" parameterType="project.spring.hohotest.model.Member" resultType="int">
        SELECT count(id) FROM member WHERE email=#{email}
    </select>
    
    <!-- 회원정보를 저장한다 : 가입 -->
	<insert id="insertMember" parameterType="project.spring.hohotest.model.Member" 
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO member (
			name, user_id, user_pw, 
			email, gender, birthdate, tel, 
			postcode, addr1, addr2
		) VALUES (
			#{name}, #{user_id}, password(#{user_pw}),
			#{email}, #{gender}, #{birthdate}, #{tel}, 
			#{postcode}, #{addr1}, #{addr2}
		)
	</insert>
	
	<!-- 아이디와 비밀번호가 일치하는 회원정보를 조회한다. -->
    <select id="selectLoginInfo" parameterType="project.spring.hohotest.model.Member" resultMap="member">
        SELECT
        	id, name, user_id, user_pw, email, gender,
        	DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
        	tel, postcode, addr1, addr2
        FROM member
        WHERE user_id=#{user_id} AND user_pw=password(#{user_pw})
        ORDER BY id DESC
        LIMIT 0, 1
    </select>
    
    <!-- 비밀번호 재발급: 이메일주소가 일치하는 비밀번호를 변경한다. -->
	<update id="updateMemberPasswordByEmail" parameterType="project.spring.hohotest.model.Member">
		UPDATE member SET user_pw=password(#{user_pw})
		WHERE email=#{email};
	</update>
	
	<!-- 현재 로그인 중인 회원의 비밀번호를 검사한다. -->
    <select id="selectMemberPasswordCount" parameterType="project.spring.hohotest.model.Member" 
    	resultType="int">
        SELECT count(id) FROM member 
        WHERE id=#{id} AND user_pw=password(#{user_pw})
    </select>
	
	<!-- 회원정보를 삭제한다 : 탈퇴 -->
	<delete id="deleteMember" parameterType="project.spring.hohotest.model.Member">
		DELETE FROM member WHERE id=#{id};
	</delete>
	
	<!-- 회원정보를 변경한다 -->
	<update id="updateMember" parameterType="project.spring.hohotest.model.Member">
		UPDATE member SET
			name=#{name}, email=#{email}, gender=#{gender}, birthdate=#{birthdate},
			tel=#{tel}, postcode=#{postcode}, addr1=#{addr1}, addr2=#{addr2},
			edit_date=now()
			
			<if test="newuser_pw != null and newuser_pw != ''">
				, user_pw=password(#{newUserPw})
			</if>
		WHERE id=#{id}
	</update>
	
	<!-- 일련번호에 의한 회원정보 조회 -->
    <select id="selectMember" parameterType="project.spring.hohotest.model.Member" 
    	resultMap="member">
        SELECT
        	id, name, user_id, user_pw, email, gender,
        	DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
        	tel, postcode, addr1, addr2
        FROM member
        WHERE id=#{id}
    </select>
    
    <!-- 회원 정보 전체 조회 -->
    <select id="selectAllMember" parameterType="project.spring.hohotest.model.Member" 
    	resultMap="member">
        SELECT
        	id, name, user_id, user_pw, email, gender,
        	DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate,
        	tel, postcode, addr1, addr2
        FROM member
        ORDER BY id DESC
    </select>
</mapper>